# Core Language Functions

The following is a list of functions that are provided in the core
Parable language.

## reading stack comments

Stack comments are read from left to right. There is a double dash (--)
marking the split between the before and after actions.

A function that has no impact on the stack has an empty effect:

        --

Functions that take values will list them on the left side of the divider:

        number  --

Functions that return a value will list them on the right side:

        --  number

If multiple values are consumed or left, the stack is read from left to
right, with the rightmost value being the top item when a function is
called:

        number string  --  character number
               ^^^^^^                ^^^^^^
               top item before       top item after

Values are generally listed by type, with an identifier after a colon (:)
if clarifications are needed.

        number:bytes

## the functions

### :n

Convert the top value on the stack to a number.

### :s

Convert the top value on the stack to a string.

### :c

Convert the top value on the stack to a character.

### :p

Convert the top value on the stack to a pointer.

### :f

Convert the top value on the stack to a flag.

### type?

Return a number representing the data type of the top value on
the stack.

### +

Adds the top two numbers on the stack. Or merges the top two
strings on the stack.

### -

Subtract the top two values on the stack.

### *

Multiply the top two values on the stack.

### /

Divide the top two values on the stack.

### rem

Divide the top two values on the stack and return the remainder.

### floor

### shift

Perform a bitwise shift operation on the top two values on the stack.
Use a negative value to shift left or a positive value to shift right.

### and

Perform a bitwise AND operation on the top two values on the stack.

### or

Perform a bitwise OR operation on the top two values on the stack.

### xor

Perform a bitwise XOR operation on the top two values on the stack.

### <

Compare top two values on the stack for less than.

        number:0  number:1  --  flag
        number:0 < number:1

### >

Compare top two values on the stack for greater than.

        number:0  number:1  --  flag
        number:0 > number:1

### <=

Compare top two values on the stack for less than or equal to.

        number:0  number:1  --  flag
        number:0 <= number:1

### >=

Compare top two values on the stack for greater than or equal to.

        number:0  number:1  --  flag
        number:0 >= number:1

### =

Compare top two values for equality.

        value:0  value:1  --  flag

If comparing strings, compares the values of the strings, not the
pointers.

### <>

Compare top two values for inequality.

        value:0  value:1  --  flag

If comparing strings, compares the values of the strings, not the
pointers.

### if

Takes a flag and two quotes. If the flag is **true**, executes *quote:0*.
Otherwise, it executes *quote:1*.

        flag  quote:0  quote:1  --

### while-true

### while-false

### repeat

### invoke

### dip

### sip

### bi

### tri

### copy

### fetch

Fetch a value from a slice. Use the type conversion functions to specify the
type after the fetch operation.

        slice offset  --  value

### store

Store a value into a slice.

        value slice offset  --

### request

Request a new slice. Returns a pointer.

        --  pointer

### release

Release a slice.

        pointer  --

### collect-garbage

Attempt to identify and collect slices that were allocated but are no
longer in use.

        --

### dup

### drop

### swap

### over

### tuck

### nip

### depth

### reset

### find

### substring

### numeric?

### to-lowercase

### to-uppercase

### length

### report-error

### NUMBER

### STRING

### CHARACTER

### POINTER

### FLAG

### dup-pair

### drop-pair

### true

### false

### if-true

### if-false

### between

### true?

### false?

### even?

### odd?

### negative?

### positive?

### zero?

### if-character

### if-string

### if-number

### if-pointer

### if-flag

### bi*

### bi@

### @

### !

### increment

### decrement

### variable

### preserve

### expand-range

### sum-range

### lowercase?

### uppercase?

### letter?

### digit?

### alphanumeric?

### vowel?

### abs

### min

### max

### invoke-count-items

### drop-multiple

### \*slice-current\*

### \*slice-offset\*

### slice-position

### slice-advance

### slice-retreat

### slice-store-current

### slice-fetch-current

### slice-store

### slice-fetch

### slice-store-retreat

### slice-fetch-retreat

### slice-set

### slice-store-items

### new-slice

### preserve-slice

### \*array:filter\*

### \*array:source\*

### \*array:results\*

### array-from-quote

### array-length

### array-fetch

### array-store

### array-contains?

### array-contains-string?

### array-push

### array-pop

### array-filter

### array-map

### array-compare

### array-reduce

### array-reverse

### reverse
