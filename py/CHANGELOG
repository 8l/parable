# parable
# Copyright (c) 2012, 2013    Charles Childers
#
#               -----------------------------------------------------
# 2013-05-11    Initial work on parsing Parable code
#
# 2013-05-12    Successfully break down and recognize entire
#               bootstrap.parable file
#
#               Begin work on dictionary support:
#               - in_dictionary
#               - add_definition
#
#               Add bytecode.py for symbolic byte code names
#
# 2013-05-13    Memory manager functions that are Working:
#                 request_slice()    fetch()
#                 release_slice()    store()
#
# 2013-05-14    added string_to_slice()
#               added slice_to_string()
#               compilation of strings, comments working
#               [ ] now allocate slices properly.
#               compile() now appears to work properly
#               begin implementing bytecode interpreter
#               map primitives to names in bootstrap.parable
#
#               implement byte codes:
#               BC_MEM_REQUEST     BC_MEM_RELEASE   BC_MEM_COPY
#               BC_MEM_FETCH       BC_MEM_STORE     BC_QUOTE_NAME
#               BC_FLOW_RETURN     BC_FLOW_CALL     BC_FLOW_CALL_F
#               BC_PUSH_N          BC_PUSH_S        BC_PUSH_C
#               BC_PUSH_F          BC_PUSH_COMMENT
#
# 2013-05-15    fix mapping of names to slices
#
#               implement byte codes:
#               BC_COMPARE_LT      BC_COMPARE_GT    BC_COMPARE_LTEQ
#               BC_COMPARE_GTEQ    BC_COMPARE_EQ    BC_COMARE_NEQ
#               BC_ADD             BC_SUBTRACT      BC_MULTIPLY
#               BC_DIVIDE          BC_REMAINDER     BC_FLOOR
#               BC_STACK_DUP       BC_STACK_DROP    BC_STACK_SWAP
#               BC_STACK_OVER      BC_STACK_TUCK    BC_STACK_NIP
#               BC_STACK_DEPTH     BC_STACK_CLEAR   BC_TYPE_N
#               BC_TYPE_S          BC_TYPE_C        BC_TYPE_F
#               BC_TYPE_FLAG       BC_GET_TYPE
#
# 2013-05-16    implement byte codes:
#               BC_FLOW_LOOP       BC_FLOW_WHILE    BC_FLOW_UNTIL
#               BC_BITWISE_SHIFT   BC_BITWISE_AND   BC_BITWISE_OR
#               BC_BITWISE_XOR     BC_TO_UPPER      BC_TO_LOWER
#               BC_FLOW_IF         BC_LENGTH        BC_FLOW_BI
#               BC_FLOW_TRI        BC_STRING_SEEK   BC_STRING_SUBSTRING
#
#               comparison byte codes now check data types
#
#               start working on a listener interface
#
#               merge separate files; try to reorganize things into
#               a cleaner structure
#
#               begin type conversion code
#
# 2013-05-17    fix parsing of characters
#               fix bug in fetch/store
#               more work on type conversions
#
#               implement byte code: BC_STRING_NUMERIC
#               remove byte code:    BC_FLOW_WHEN
#
# 2013-05-20    start checking stack depth when executing byte codes
#
#               symbol names are stored as lowercase in the
#               dictionary now
#
#               redefinition works now
#
# 2013-05-23    add BC_REPORT_ERROR
#
#               add start of garbage collector
#
# 2013-05-24    merge in deconstruct (source decompiler)
#
# 2013-05-28    user definable constraints on slice length
#
# 2013-05-29    better method of checking token prefixes in compile()
#
# 2013-05-30    small cleanups
#
# 2013-06-03    more minor cleanups, begin work to get source to
#               follow python formatting conventions
#
# 2013-06-06    fix a bug in # prefix handler
#
# 2013-06-07    add docstrings and more comments to parable.py
#
# 2013-06-08    fix BC_STRING_SUBSTR (substring function)
#
# 2013-06-20    allow for leading space in strings and comments
#
# 2013-07-06    fixed bugs in BC_FLOW_BI and BC_FLOW_TRI causing
#               types to be lost
#
# 2013-07-09    add reverse, increment, decrement
#
# 2013-07-15    start of punga (web ui) implementation
#
# 2013-07-16    punga functional (processes code, displays errors and
#               stack contents)
#
# 2013-07-30    reverse only works on strings (fix)
#
# 2013-08-10    limit runtime in punga to 60 seconds
#
# 2013-08-26    some stuff for testing functionality
#
#               legend now displays names corresponding to pointers
#
#               punga now displays names corresponding to pointers.
#               punga now displays stack from oldest to newest.
#               punga now indicates the top item on stack.
#               punga now does garbage collection.
#
#               added vmstat.py to gather optional things for
#               tracking vm status
#               -----------------------------------------------------
